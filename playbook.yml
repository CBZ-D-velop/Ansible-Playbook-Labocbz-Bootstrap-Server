---
- name: "Prepare hosts, deploy CAs, install all packages"
  hosts: "{{ tower_env | default([]) }}"
  gather_facts: true
  become: true
  become_method: "ansible.builtin.sudo"

  tasks:
    - name: "Include labocbz.prepare_host"
      tags:
        - "labocbz.prepare_host"
      vars:
        prepare_host__users: "{{ inv_prepare_host__users | default([])}}"
        prepare_host__system_users: "{{ inv_prepare_host__system_users | default([]) }}"
        prepare_host__timezone: "{{ inv_prepare_host__timezone }}"
      ansible.builtin.include_role:
        name: "labocbz.prepare_host"

    - name: "Include labocbz.add_logrotate_confs"
      tags:
        - "labocbz.add_logrotate_confs"
      vars:
        add_logrotate_confs__files: "{{ inv_add_logrotate_confs__files }}"
      ansible.builtin.include_role:
        name: "labocbz.add_logrotate_confs"

    - name: "Include labocbz.add_certificates"
      tags:
        - "labocbz.add_certificates"
      loop: "{{ inv_ca_cert_bundles }}"
      loop_control:
        loop_var: bundle
      when: inv_ca_cert_bundles is defined
      vars:
        add_certificates__bundle_name: "{{ bundle.name }}"
        add_certificates__bundle_type: "{{ bundle.type }}"
        add_certificates__bundle_src: "{{ bundle.src }}"
        add_certificates__bundle_dest: "{{ bundle.dest }}"
        add_certificates__bundle_src_user: "{{ bundle.src_user }}"
        add_certificates__bundle_src_password: "{{ bundle.src_password }}"
        add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
        add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
        add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
      ansible.builtin.include_role:
        name: "labocbz.add_certificates"

    - name: "Install SSH"
      when: inv_install_ssh | default(false)
      block:
        - name: "Include labocbz.install_ssh"
          tags:
            - "labocbz.install_ssh"
          vars:
            install_ssh__port: "{{ inv_install_ssh__port }}"
            install_ssh__administration_name: "{{ inv_install_ssh__administration_name }}"
            install_ssh__allowed_groups: "{{ inv_install_ssh__allowed_groups }}"
          ansible.builtin.include_role:
            name: "labocbz.install_ssh"

    - name: "Install Fail2Ban"
      when: inv_install_fail2ban | default(false)
      block:
        - name: "Include labocbz.install_fail2ban"
          tags:
            - "labocbz.install_fail2ban"
          vars:
            install_fail2ban__report_email_address: "{{ inv_install_fail2ban__report_email_address }}"
            install_fail2ban__install_ssh__port: "{{ inv_install_fail2ban__ssh_port }}"
          ansible.builtin.include_role:
            name: "labocbz.install_fail2ban"

    - name: "Install UnattendedUpgrades"
      when: inv_install_unattended_upgrades | default(false)
      block:
        - name: "Include labocbz.install_unattended_upgrades"
          tags:
            - "labocbz.install_unattended_upgrades"
          vars:
            install_unattended_upgrades_automatic_reboot: "{{ inv_install_unattended_upgrades_automatic_reboot }}"
            install_unattended_upgrades_automatic_reboot_time: "{{ inv_install_unattended_upgrades_automatic_reboot_time }}"
            install_unattended_upgrades_report_email_address: "{{ inv_install_unattended_upgrades_report_email_address }}"
          ansible.builtin.include_role:
            name: "labocbz.install_unattended_upgrades"

    - name: "Install Byobu"
      when: inv_install_byobu | default(false)
      block:
        - name: "Include labocbz.install_byobu"
          tags:
            - "labocbz.install_byobu"
          vars:
            install_byobu__install_neofetch: "{{ inv_install_byobu__install_neofetch }}"
            install_byobu__enable_neofetch_for_all: "{{ inv_install_byobu__enable_neofetch_for_all }}"
            install_byobu__log_commands_for_all: "{{ inv_install_byobu__log_commands_for_all }}"
            install_byobu__set_nano_as_default_for_all: "{{ inv_install_byobu__set_nano_as_default_for_all }}"
          ansible.builtin.include_role:
            name: "labocbz.install_byobu"

    - name: "Install Postfix"
      when: inv_install_postfix | default(false)
      block:
        - name: "Include labocbz.install_postfix"
          tags:
            - "labocbz.install_postfix"
          vars:
            install_postfix__email_sender: "{{ inv_install_postfix__email_sender }}"
            install_postfix__email_sender_address: "{{ inv_install_postfix__email_sender_address }}"
            install_postfix__email_sender_api_key: "{{ inv_install_postfix__email_sender_api_key }}"
            install_postfix__aliases_addresses: "{{ inv_install_postfix__aliases_addresses }}"
            install_postfix__esmtp_banner: "{{ inv_install_postfix__esmtp_banner }}"
          ansible.builtin.include_role:
            name: "labocbz.install_postfix"

    - name: "Install Portsentry"
      when: inv_install_portsentry | default(false)
      block:
        - name: "Include labocbz.install_portsentry"
          tags:
            - "labocbz.install_portsentry"
          vars:
            install_portsentry__base_addresses: "{{ inv_install_portsentry__base_addresses }}"
            install_portsentry__ignore_addresses: "{{ inv_install_portsentry__ignore_addresses }}"
          ansible.builtin.include_role:
            name: "labocbz.install_portsentry"

    - name: "Install Rkhunter"
      when: inv_install_rkhunter | default(false)
      block:
        - name: "Include labocbz.install_rkhunter"
          tags:
            - "labocbz.install_rkhunter"
          vars:
            install_rkhunter__create_cron_job: "{{ inv_install_rkhunter__create_cron_job }}"
            install_rkhunter__cron_job_weekday: "{{ inv_install_rkhunter__cron_job_weekday }}"
            install_rkhunter__cron_job_minute: "{{ inv_install_rkhunter__cron_job_minute }}"
            install_rkhunter__cron_job_hour: "{{ inv_install_rkhunter__cron_job_hour }}"
            install_rkhunter__report_email_address: "{{ inv_install_rkhunter__create_cron_job }}"
          ansible.builtin.include_role:
            name: "labocbz.install_rkhunter"

    - name: "Install Lynis"
      when: inv_install_lynis | default(false)
      block:
        - name: "Include labocbz.install_lynis"
          tags:
            - "labocbz.install_lynis"
          vars:
            install_lynis__create_cron_job: "{{ inv_install_lynis__create_cron_job }}"
            install_lynis__cron_job_weekday: "{{ inv_install_lynis__cron_job_weekday }}"
            install_lynis__cron_job_minute: "{{ inv_install_lynis__cron_job_minute }}"
            install_lynis__cron_job_hour: "{{ inv_install_lynis__cron_job_hour }}"
            install_lynis__report_email_address: "{{ inv_install_lynis__create_cron_job }}"
            install_lynis__install_path: "{{ inv_install_lynis__install_path }}"
          ansible.builtin.include_role:
            name: "labocbz.install_lynis"

    - name: "Install Logwatch"
      when: inv_install_logwatch | default(false)
      block:
        - name: "Include labocbz.install_logwatch"
          tags:
            - "labocbz.install_logwatch"
          vars:
            install_logwatch__create_cron_job: "{{ inv_install_logwatch__create_cron_job }}"
            install_logwatch__cron_job_weekday: "{{ inv_install_logwatch__cron_job_weekday }}"
            install_logwatch__cron_job_minute: "{{ inv_install_logwatch__cron_job_minute }}"
            install_logwatch__cron_job_hour: "{{ inv_install_logwatch__cron_job_hour }}"
            install_logwatch__report_email_address: "{{ inv_install_logwatch__report_email_address }}"
            install_logwatch__output_format: "{{ inv_install_logwatch__output_format }}"
          ansible.builtin.include_role:
            name: "labocbz.install_logwatch"

    - name: "Install Node_Exporter"
      when: inv_install_node_exporter | default(false)
      block:
        - name: "Include labocbz.prepare_host"
          when: inv_prepare_host__node_exporter_system_users is defined
          tags:
            - "labocbz.prepare_host"
          vars:
            prepare_host__system_users: "{{ inv_prepare_host__node_exporter_system_users }}"
          ansible.builtin.include_role:
            name: "labocbz.prepare_host"

        - name: "Include labocbz.add_certificates"
          tags:
            - "labocbz.add_certificates"
          loop: "{{ inv_install_node_exporter__certs }}"
          loop_control:
            loop_var: bundle
          when: inv_install_node_exporter__certs is defined
          vars:
            add_certificates__bundle_name: "{{ bundle.name }}"
            add_certificates__bundle_type: "{{ bundle.type }}"
            add_certificates__bundle_src: "{{ bundle.src }}"
            add_certificates__bundle_dest: "{{ bundle.dest }}"
            add_certificates__bundle_src_user: "{{ bundle.src_user }}"
            add_certificates__bundle_src_password: "{{ bundle.src_password }}"
            add_certificates__bundle_dest_user: "{{ bundle.dest_user }}"
            add_certificates__bundle_dest_group: "{{ bundle.dest_group }}"
            add_certificates__bundle_dest_mode: "{{ bundle.dest_mode }}"
          ansible.builtin.include_role:
            name: "labocbz.add_certificates"

        - name: "Include labocbz.install_node_exporter"
          tags:
            - "labocbz.install_node_exporter"
          vars:
            install_node_exporter__install_path: "{{ inv_install_node_exporter__install_path }}"
            install_node_exporter__lib_path: "{{ inv_install_node_exporter__lib_path }}"
            install_node_exporter__web_ssl_path: "{{ inv_install_node_exporter__web_ssl_path }}"
            install_node_exporter__web_config_file: "{{ inv_install_node_exporter__web_config_file }}"
            install_node_exporter__loglevel: "{{ inv_install_node_exporter__loglevel }}"
            install_node_exporter__version: "{{ inv_install_node_exporter__version }}"
            install_node_exporter__architecture: "{{ inv_install_node_exporter__architecture }}"
            install_node_exporter__ssl: "{{ inv_install_node_exporter__ssl }}"
            install_node_exporter__ssl_key: "{{ inv_install_node_exporter__ssl_key }}"
            install_node_exporter__ssl_crt: "{{ inv_install_node_exporter__ssl_crt }}"
            install_node_exporter__port: "{{ inv_install_node_exporter__port }}"
            install_node_exporter__stats_exports: "{{ inv_install_node_exporter__stats_exports }}"
            install_node_exporter__basic_auth: "{{ inv_install_node_exporter__basic_auth }}"
            install_node_exporter__basic_auth_login: "{{ inv_install_node_exporter__basic_auth_login }}"
            install_node_exporter__basic_auth_password_hash: "{{ inv_install_node_exporter__basic_auth_password_hash }}"
            install_node_exporter__user: "{{ inv_install_node_exporter__user }}"
            install_node_exporter__group: "{{ inv_install_node_exporter__group }}"
          ansible.builtin.include_role:
            name: "labocbz.install_node_exporter"

        - name: "Include labocbz.add_logrotate_confs"
          tags:
            - "labocbz.add_logrotate_confs"
          vars:
            add_logrotate_confs__files: "{{ inv_add_logrotate_confs__node_exporter_configurations }}"
          ansible.builtin.include_role:
            name: "labocbz.add_logrotate_confs"
